import reimport stringfrom translator import translfrom currency import convert_currency as ccfrom carList.calc import calculate_all as calcimport sqlite3import jsonimport asynciofrom playwright.async_api import async_playwright, Playwright# Функции get_info, get_images, get_price остаются без измененийasync def get_info(page, url):    await page.goto(url)    await page.wait_for_selector('.DetailSummary_define_summary__NOYid')    container = await page.query_selector('.DetailSummary_define_summary__NOYid')    elements = await container.query_selector_all('*')    yearMonth_full = await elements[1].inner_text()    yearMonth = '20' + yearMonth_full.replace("식", "").replace('연형정보', '').replace('/', '').replace(' \n', '')    mileage_full = await elements[5].inner_text()    mileage = mileage_full.replace(',', '').replace('km', '')    fuel_type = await elements[7].inner_text()    car_number = await elements[9].inner_text()    return {        'year': yearMonth[:4],        'month': yearMonth[4:],        'mileage': mileage,        'fuel_type': transl(fuel_type, 'ru'),        'car_number': car_number,    }async def get_images(page, url):    await page.goto(url)    await page.wait_for_selector('#detailInfomation')    detailInformation = page.locator('#detailInfomation')    await page.wait_for_selector('.DetailCarPhotoPc_thumb__2kpDi')    main_photo_rel = detailInformation.locator('.swiper-wrapper > div')    count = await main_photo_rel.count()    lst = []    for i in range(count):        item = main_photo_rel.nth(i)        img = item.locator('img')        src = await img.get_attribute('src')        data_src = await img.get_attribute('data-src')        lst.append(data_src if '/assets/images/common/' in src else src)    images = lst[1:] + lst[:1]    return imagesasync def get_price(page, url):    await page.goto(url)    price = await page.locator('.DetailLeadCase_price__tfeps').inner_text()    return priceasync def get_spec_info(page, url):    await page.goto(url)    await page.wait_for_selector('.DetailSummary_btn_detail__msm-h')    await page.click('.DetailSummary_btn_detail__msm-h')    await page.wait_for_selector('.DetailSummary_info_detail__IfKy1')    container = page.locator('.DetailSummary_info_detail__IfKy1 li')    engine_cc = await container.nth(3).locator('span').inner_text()    transmission = await container.nth(5).locator('span').inner_text()    body_type = await container.nth(6).locator('span').inner_text()    color = await container.nth(7).locator('span').inner_text()    seats = await container.nth(9).locator('span').inner_text()    return {        'engine_cc': engine_cc,        'transmission': transl(transmission, 'ru'),        'body_type': transl(body_type, 'ru'),        'color': transl(color, 'ru'),        'seats': re.sub(r'[^\d]', '', seats)    }async def get_urls(page, url):    await page.goto(url)    await page.wait_for_selector('#sr_photo')    items_photo = page.locator('#sr_photo > li')    count_photo = await items_photo.count()    cars = []    for i in range(count_photo):        item = items_photo.nth(i)        href = await item.locator('a').get_attribute('href')        title = transl(await item.locator('.inf').inner_text(), 'en')        url = 'https://encar.com' + href        cars.append((title, url))    items_special = page.locator('#sr_special > tr')    count_special = await items_special.count()    for i in range(count_special):        item = items_special.nth(i)        href = await item.locator('a >> nth=0').get_attribute('href')        title = transl(await item.locator('.inf > a').inner_text(), 'en')        url = 'https://encar.com' + href        cars.append((title, url))    items_normal = page.locator('#sr_normal > tr')    count_normal = await items_normal.count()    for i in range(count_normal):        item = items_normal.nth(i)        href = await item.locator('.inf > a').get_attribute('href')        title = transl(await item.locator('.inf > a').inner_text(), 'en')        url = 'https://encar.com' + href        cars.append((title, url))    return carsasync def process_url(context, car, conn, sem):    async with sem:        page = await context.new_page()        try:            info = await get_info(page, car[1])            spec_info = await get_spec_info(page, car[1])            images_json = json.dumps(await get_images(page, car[1]))            price = await get_price(page, car[1])            cleaned = re.sub(r'[^\d,]', '', price)            price_won = int(cleaned.replace(',', '')) * 10000            price_eur = cc(price_won, 'KRW', 'EUR')            price_rub = cc(price_won, 'KRW', 'RUB')            engine_cc = int(spec_info['engine_cc'].replace("cc", "").replace(",", "").strip())            year = int(info['year'])            calculated = calc(price_rub, engine_cc, year)            cursor = conn.cursor()            cursor.execute('''                INSERT INTO vehicles (title, car_number, price_won, price_rub, year, month, mileage, fuel_type, images_json, engine_cc, transmission, body_type, color, seats, duty_eur, duty_rub, fee, price_service, total)                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)            ''', (                car[0],                info['car_number'],                price_won,                price_rub,                year,                info['month'],                info['mileage'],                info['fuel_type'],                images_json,                engine_cc,                spec_info['transmission'],                spec_info['body_type'],                'Оранжевый' if spec_info['color'] == 'Апельсин' else spec_info['color'],                spec_info['seats'],                calculated['duty_eur'],                calculated['duty_rub'],                calculated['fee'],                calculated['price_service'],                calculated['total'],            ))            conn.commit()        except Exception as e:            print(f"Ошибка при обработке {car[1]}: {e}")        finally:            await page.close()async def run(playwright: Playwright):    chromium = playwright.chromium    context = await chromium.launch_persistent_context(        user_data_dir="/tmp/playwright",        headless=True,        viewport={"width": 1280, "height": 800},        user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36"    )    page = context.pages[0] if context.pages else await context.new_page()    # Получение списка URL-ов    cars = []    for page_num in range(5, 7):        urls = [            f"http://www.encar.com/fc/fc_carsearchlist.do?carType=for#!%7B%22action%22%3A%22(And.Hidden.N._.(C.CarType.N._.Manufacturer.BMW.))%22%2C%22toggle%22%3A%7B%7D%2C%22layer%22%3A%22%22%2C%22sort%22%3A%22ModifiedDate%22%2C%22page%22%3A{page_num}%2C%22limit%22%3A20%2C%22searchKey%22%3A%22%22%2C%22loginCheck%22%3Afalse%7D", #BMW            f"http://www.encar.com/fc/fc_carsearchlist.do?carType=for#!%7B%22action%22%3A%22(And.Hidden.N._.(C.CarType.N._.Manufacturer.%EB%B2%A4%EC%B8%A0.))%22%2C%22toggle%22%3A%7B%7D%2C%22layer%22%3A%22%22%2C%22sort%22%3A%22ModifiedDate%22%2C%22page%22%3A{page_num}%2C%22limit%22%3A20%2C%22searchKey%22%3A%22%22%2C%22loginCheck%22%3Afalse%7D", #Benz            f"http://www.encar.com/fc/fc_carsearchlist.do?carType=for#!%7B%22action%22%3A%22(And.Hidden.N._.(C.CarType.N._.Manufacturer.%EC%95%84%EC%9A%B0%EB%94%94.))%22%2C%22toggle%22%3A%7B%7D%2C%22layer%22%3A%22%22%2C%22sort%22%3A%22ModifiedDate%22%2C%22page%22%3A{page_num}%2C%22limit%22%3A20%2C%22searchKey%22%3A%22%22%2C%22loginCheck%22%3Afalse%7D", #Audi            f"http://www.encar.com/fc/fc_carsearchlist.do?carType=for#!%7B%22action%22%3A%22(And.Hidden.N._.(C.CarType.N._.Manufacturer.%ED%8F%AC%EB%A5%B4%EC%89%90.))%22%2C%22toggle%22%3A%7B%7D%2C%22layer%22%3A%22%22%2C%22sort%22%3A%22ModifiedDate%22%2C%22page%22%3A{page_num}%2C%22limit%22%3A20%2C%22searchKey%22%3A%22%22%2C%22loginCheck%22%3Afalse%7D", #Porsche            f"http://www.encar.com/fc/fc_carsearchlist.do?carType=for#!%7B%22action%22%3A%22(And.Hidden.N._.(C.CarType.N._.Manufacturer.%EB%9E%9C%EB%93%9C%EB%A1%9C%EB%B2%84.))%22%2C%22toggle%22%3A%7B%7D%2C%22layer%22%3A%22%22%2C%22sort%22%3A%22ModifiedDate%22%2C%22page%22%3A{page_num}%2C%22limit%22%3A20%2C%22searchKey%22%3A%22%22%2C%22loginCheck%22%3Afalse%7D", #Land Rover            f"http://www.encar.com/fc/fc_carsearchlist.do?carType=for#!%7B%22action%22%3A%22(And.Hidden.N._.(C.CarType.N._.Manufacturer.%EB%B3%BC%EB%B3%B4.))%22%2C%22toggle%22%3A%7B%7D%2C%22layer%22%3A%22%22%2C%22sort%22%3A%22ModifiedDate%22%2C%22page%22%3A{page_num}%2C%22limit%22%3A20%2C%22searchKey%22%3A%22%22%2C%22loginCheck%22%3Afalse%7D", #Volvo            f"http://www.encar.com/fc/fc_carsearchlist.do?carType=for#!%7B%22action%22%3A%22(And.Hidden.N._.(C.CarType.N._.Manufacturer.%EB%8B%9B%EC%82%B0.))%22%2C%22toggle%22%3A%7B%7D%2C%22layer%22%3A%22%22%2C%22sort%22%3A%22ModifiedDate%22%2C%22page%22%3A{page_num}%2C%22limit%22%3A20%2C%22searchKey%22%3A%22%22%2C%22loginCheck%22%3Afalse%7D", #Nissan            f"http://www.encar.com/fc/fc_carsearchlist.do?carType=for#!%7B%22action%22%3A%22(And.Hidden.N._.(C.CarType.N._.Manufacturer.%EB%8F%84%EC%9A%94%ED%83%80.))%22%2C%22toggle%22%3A%7B%7D%2C%22layer%22%3A%22%22%2C%22sort%22%3A%22ModifiedDate%22%2C%22page%22%3A{page_num}%2C%22limit%22%3A20%2C%22searchKey%22%3A%22%22%2C%22loginCheck%22%3Afalse%7D", #Toyota            f"http://www.encar.com/fc/fc_carsearchlist.do?carType=for#!%7B%22action%22%3A%22(And.Hidden.N._.(C.CarType.N._.Manufacturer.%EB%A0%89%EC%84%9C%EC%8A%A4.))%22%2C%22toggle%22%3A%7B%7D%2C%22layer%22%3A%22%22%2C%22sort%22%3A%22ModifiedDate%22%2C%22page%22%3A{page_num}%2C%22limit%22%3A20%2C%22searchKey%22%3A%22%22%2C%22loginCheck%22%3Afalse%7D", #Lexus            f"http://www.encar.com/fc/fc_carsearchlist.do?carType=for#!%7B%22action%22%3A%22(And.Hidden.N._.(C.CarType.N._.Manufacturer.%EB%A1%A4%EC%8A%A4%EB%A1%9C%EC%9D%B4%EC%8A%A4.))%22%2C%22toggle%22%3A%7B%7D%2C%22layer%22%3A%22%22%2C%22sort%22%3A%22ModifiedDate%22%2C%22page%22%3A{page_num}%2C%22limit%22%3A20%2C%22searchKey%22%3A%22%22%2C%22loginCheck%22%3Afalse%7D", #RollsRoyce            f"http://www.encar.com/fc/fc_carsearchlist.do?carType=for#!%7B%22action%22%3A%22(And.Hidden.N._.(C.CarType.N._.Manufacturer.%EB%A7%81%EC%BB%A8.))%22%2C%22toggle%22%3A%7B%7D%2C%22layer%22%3A%22%22%2C%22sort%22%3A%22ModifiedDate%22%2C%22page%22%3A{page_num}%2C%22limit%22%3A20%2C%22searchKey%22%3A%22%22%2C%22loginCheck%22%3Afalse%7D", #Lincoln            # f"http://www.encar.com/fc/fc_carsearchlist.do?carType=for#!%7B%22action%22%3A%22(And.Hidden.N._.(C.CarType.N._.Manufacturer.%EB%A5%B4%EB%85%B8.))%22%2C%22toggle%22%3A%7B%7D%2C%22layer%22%3A%22%22%2C%22sort%22%3A%22ModifiedDate%22%2C%22page%22%3A{page_num}%2C%22limit%22%3A20%2C%22searchKey%22%3A%22%22%2C%22loginCheck%22%3Afalse%7D", #Renault            f"http://www.encar.com/fc/fc_carsearchlist.do?carType=for#!%7B%22action%22%3A%22(And.Hidden.N._.(C.CarType.N._.Manufacturer.%EC%89%90%EB%B3%B4%EB%A0%88.))%22%2C%22toggle%22%3A%7B%7D%2C%22layer%22%3A%22%22%2C%22sort%22%3A%22ModifiedDate%22%2C%22page%22%3A{page_num}%2C%22limit%22%3A20%2C%22searchKey%22%3A%22%22%2C%22loginCheck%22%3Afalse%7D", #Chevrolet            f"http://www.encar.com/fc/fc_carsearchlist.do?carType=for#!%7B%22action%22%3A%22(And.Hidden.N._.(C.CarType.N._.Manufacturer.%ED%98%BC%EB%8B%A4.))%22%2C%22toggle%22%3A%7B%7D%2C%22layer%22%3A%22%22%2C%22sort%22%3A%22ModifiedDate%22%2C%22page%22%3A{page_num}%2C%22limit%22%3A20%2C%22searchKey%22%3A%22%22%2C%22loginCheck%22%3Afalse%7D", #Honda            f"http://www.encar.com/dc/dc_carsearchlist.do?carType=kor#!%7B%22action%22%3A%22(And.Hidden.N._.(C.CarType.Y._.Manufacturer.%ED%98%84%EB%8C%80.))%22%2C%22toggle%22%3A%7B%7D%2C%22layer%22%3A%22%22%2C%22sort%22%3A%22ModifiedDate%22%2C%22page%22%3A{page_num}%2C%22limit%22%3A20%2C%22searchKey%22%3A%22%22%2C%22loginCheck%22%3Afalse%7D", #Hyundai            f"http://www.encar.com/dc/dc_carsearchlist.do?carType=kor#!%7B%22action%22%3A%22(And.Hidden.N._.(C.CarType.Y._.Manufacturer.%EC%A0%9C%EB%84%A4%EC%8B%9C%EC%8A%A4.))%22%2C%22toggle%22%3A%7B%7D%2C%22layer%22%3A%22%22%2C%22sort%22%3A%22ModifiedDate%22%2C%22page%22%3A{page_num}%2C%22limit%22%3A20%2C%22searchKey%22%3A%22%22%2C%22loginCheck%22%3Afalse%7D", #Genesis            f"http://www.encar.com/dc/dc_carsearchlist.do?carType=kor#!%7B%22action%22%3A%22(And.Hidden.N._.(C.CarType.Y._.Manufacturer.%EA%B8%B0%EC%95%84.))%22%2C%22toggle%22%3A%7B%7D%2C%22layer%22%3A%22%22%2C%22sort%22%3A%22ModifiedDate%22%2C%22page%22%3A{page_num}%2C%22limit%22%3A20%2C%22searchKey%22%3A%22%22%2C%22loginCheck%22%3Afalse%7D", #Kia            f"http://www.encar.com/dc/dc_carsearchlist.do?carType=kor#!%7B%22action%22%3A%22(And.Hidden.N._.(C.CarType.Y._.Manufacturer.KG%EB%AA%A8%EB%B9%8C%EB%A6%AC%ED%8B%B0(%EC%8C%8D%EC%9A%A9_).))%22%2C%22toggle%22%3A%7B%7D%2C%22layer%22%3A%22%22%2C%22sort%22%3A%22ModifiedDate%22%2C%22page%22%3A{page_num}%2C%22limit%22%3A20%2C%22searchKey%22%3A%22%22%2C%22loginCheck%22%3Afalse%7D", #Ssangyong        ]        for i in urls:            car = await get_urls(page, i)            cars += car    # Установка семафора для ограничения количества одновременных задач    sem = asyncio.Semaphore(20)  # Можно увеличить до 10 или 15 при необходимости    # Создание базы данных и таблицы, если они не существуют    conn = sqlite3.connect('db/vehicles.db')    cursor = conn.cursor()    cursor.execute('''        CREATE TABLE IF NOT EXISTS vehicles (            id INTEGER PRIMARY KEY AUTOINCREMENT,            title TEXT,            car_number TEXT,            price_won INTEGER,            price_rub INTEGER,            year INTEGER,            month INTEGER,            mileage INTEGER,            fuel_type TEXT,            images_json TEXT,            engine_cc INTEGER,            transmission TEXT,            body_type TEXT,            color TEXT,            seats TEXT,            duty_eur INTEGER,            duty_rub INTEGER,            fee INTEGER,            price_service INTEGER,            total INTEGER        )    ''')    conn.commit()    # Параллельная обработка URL-ов    tasks = [process_url(context, car, conn, sem) for car in cars]    await asyncio.gather(*tasks)    conn.close()    await context.close()async def main():    async with async_playwright() as pw:        await run(pw)asyncio.run(main())